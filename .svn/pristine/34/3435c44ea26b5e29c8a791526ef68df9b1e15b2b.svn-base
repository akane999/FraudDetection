/*
 * Copyright (c) 2016, WSO2 Inc. (http://wso2.com) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.millenium.credibanco.evaq;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import javax.ws.rs.Consumes;
import javax.ws.rs.DefaultValue;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;

import com.millenium.credibanco.evaq.engine.EvaluadorAdquirienteCincoQ;
import com.millenium.credibanco.evaq.engine.EvaluadorAdquirienteModelo;
import com.millenium.credibanco.evaq.engine.EvaluadorEmisorCincoQ;
import com.millenium.credibanco.evaq.engine.EvaluadorEmisorModelo;
import com.millenium.credibanco.evaq.model.InputEvaQ;
import com.millenium.credibanco.evaq.model.LlaveValor;
import com.millenium.credibanco.evaq.model.RespuestaEvaluador;
import com.millenium.credibanco.evaq.model.TipoAlertamientoEnum;
import com.millenium.credibanco.exception.ServiceCredibancoException;

/**
 * This is the Microservice resource class.
 * See <a href="https://github.com/wso2/msf4j#getting-started">https://github.com/wso2/msf4j#getting-started</a>
 * for the usage of annotations.
 *
 * @since 1.0.0-SNAPSHOT
 */
@Path("/service")
public class ServiceCredibanco {

    @POST
    @Path("/cincoq")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    public RespuestaEvaluador cincoq(InputEvaQ inputEvaQ) throws ServiceCredibancoException {
        System.out.println("POST cincoq invoked");
        RespuestaEvaluador r = null;
        if( inputEvaQ.getTx().getTipoAlertamiento().equals( TipoAlertamientoEnum.EMISOR ) ){
        	r = EvaluadorEmisorCincoQ.ejecutarEvaluador( inputEvaQ.getHistoricoTx().getTransacciones()
            		, inputEvaQ.getTx()
            		, inputEvaQ.getListEvaluadorQ() );
        }else if( inputEvaQ.getTx().getTipoAlertamiento().equals( TipoAlertamientoEnum.ADQUIRENTE ) ){
        	r = EvaluadorAdquirienteCincoQ.ejecutarEvaluador( inputEvaQ.getHistoricoTx().getTransacciones()
            		, inputEvaQ.getTx()
            		, inputEvaQ.getListEvaluadorQ() );
        }
        
        return r;
    }

    @POST
    @Path("/modelo")
    @Consumes({"application/json"})
    @Produces({"application/json"})
    public RespuestaEvaluador modelo(InputEvaQ inputEvaQ) throws Exception {
    	System.out.println("POST modelo invoked");
    	RespuestaEvaluador r = null;
    	if( inputEvaQ.getTx().getTipoAlertamiento().equals( TipoAlertamientoEnum.EMISOR ) ){
	        r = EvaluadorEmisorModelo.ejecutarEvaluador( inputEvaQ.getHistoricoTx().getTransacciones()
	        		, inputEvaQ.getTx()
	        		, inputEvaQ.getListEvaluadorQ() );
    	}else if( inputEvaQ.getTx().getTipoAlertamiento().equals( TipoAlertamientoEnum.ADQUIRENTE ) ){
    		r = EvaluadorAdquirienteModelo.ejecutarEvaluador( inputEvaQ.getHistoricoTx().getTransacciones()
	        		, inputEvaQ.getTx()
	        		, inputEvaQ.getListEvaluadorQ() );
    	}
    	
        return r;
    }


    @GET
    @Path("/test")
    @Produces({"application/json"})
    @DefaultValue(value="")
    public RespuestaEvaluador cincoq() throws ServiceCredibancoException {
        // TODO: Implementation for HTTP POST request
        System.out.println("invoked "+Thread.currentThread().getName());

        int t = new Random().nextInt(10)+1;
        try {
			Thread.sleep(t*1000);
		} catch (InterruptedException e) { }

        RespuestaEvaluador r = new RespuestaEvaluador();
        r.setIdAlerta(58L);
        List<LlaveValor> lista = new ArrayList<LlaveValor>();
        LlaveValor lv = new LlaveValor();
        lv.setLlave("victor");
        lv.setValor("Cardenas");
        lista.add(lv);
        r.setResultadosQ(lista);
        System.out.println("ended "+Thread.currentThread().getName());

        return r;
    }
    
    private RespuestaEvaluador respuestaEvaluadorTest(){
    	RespuestaEvaluador r= new RespuestaEvaluador();
        r.setResultadosQ( Arrays.asList( new LlaveValor[]{ new LlaveValor("Q1", "100", "" ) } ) );
        r.setNivelRiesgo("ALTO");
        
        
        Map<String, String> mapa= new HashMap<String, String>();
        mapa.put("uno", "unoValue");
        mapa.put("dos", "dosValue");
		r.setRespuestaModelo( mapa );
        
        return r;
    }


}
